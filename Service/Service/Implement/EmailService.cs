using MailKit.Net.Smtp;
using Microsoft.Extensions.Configuration;
using MimeKit;
using Microsoft.Extensions.Caching.Memory;
using Service.Service.Interface;
using Repository.DTO;

public class EmailService
{
    private readonly IConfiguration _config;
    private readonly IMemoryCache _cache;

    public EmailService(IConfiguration config, IMemoryCache cache)
    {
        _config = config;
        _cache = cache;
    }

	public string GetTemplate()
	{
		var filePath = Path.Combine(AppContext.BaseDirectory, "Service", "Implement", "template.html");
		return File.ReadAllText(filePath);
	}

	public async Task SendEmailAsync(SendEmailRequest request)
    {
        var email = new MimeMessage();
        email.From.Add(MailboxAddress.Parse(_config["EmailSettings:From"]));
        email.To.Add(MailboxAddress.Parse(request.ToEmail));
        email.Subject = request.Subject;

		var body = new TextPart(MimeKit.Text.TextFormat.Html)
		{
			Text = GetTemplate()
		.Replace("{{Content}}", request.Content ?? string.Empty)
		.Replace("{{UserName}}", request.UserName ?? string.Empty)
		};

		var multipart = new Multipart("mixed") { body };

        var memoryStreams = new List<MemoryStream>();

        try
        {
            if (request.File != null && request.File.Any())
            {
                foreach (var formFile in request.File)
                {
                    if (formFile.Length > 0)
                    {
                        var memoryStream = new MemoryStream();
                        await formFile.CopyToAsync(memoryStream);
                        memoryStream.Position = 0;

                        var attachment = new MimePart(formFile.ContentType)
                        {
                            Content = new MimeContent(memoryStream, ContentEncoding.Default),
                                    ContentDisposition = new ContentDisposition(ContentDisposition.Attachment),
                                    ContentTransferEncoding = ContentEncoding.Base64,
                                    FileName = formFile.FileName
                        };

                        multipart.Add(attachment);
                        memoryStreams.Add(memoryStream); 
                    }
                }
            }

            email.Body = multipart;

            using var smtp = new SmtpClient();
            await smtp.ConnectAsync(_config["EmailSettings:SmtpServer"], int.Parse(_config["EmailSettings:Port"]), true);
            await smtp.AuthenticateAsync(_config["EmailSettings:Username"], _config["EmailSettings:Password"]);
            await smtp.SendAsync(email);
            await smtp.DisconnectAsync(true);
        }
        finally
        {
            foreach (var ms in memoryStreams)
                ms.Dispose();
        }
    }

    //	public async Task SendOTPAsync(string toEmail)
    //	{
    //		string otp = CreateOTP();

    //		var coaches = await _coachProfileService.GetAllAsync();
    //		var coach = coaches.FirstOrDefault(x =>
    //			x.EmailAddress.Equals(toEmail, StringComparison.OrdinalIgnoreCase));

    //		if (coach == null)
    //		{
    //			throw new Exception("Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.");
    //		}

    //		if (coach.Status?.ToLower() == "verified")
    //		{
    //			throw new Exception("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c.");
    //		}

    //		// N·∫øu l√† unverified, ti·∫øn h√†nh g·ª≠i m√£ OTP
    //		string htmlContent = $@"
    //		<p>Xin ch√†o <strong>{coach.FullName}</strong>,</p>
    //		<p>M√£ OTP x√°c th·ª±c email c·ªßa b·∫°n l√†:</p>
    //		<div style='font-size: 28px; font-weight: bold; color: #2d6cdf; padding: 12px 0;'>{otp}</div>
    //		<p>Vui l√≤ng nh·∫≠p m√£ n√†y ƒë·ªÉ ho√†n t·∫•t vi·ªác x√°c th·ª±c email c·ªßa b·∫°n. M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong>.</p>
    //		<hr style='margin: 20px 0;' />
    //		<p style='font-size: 13px; color: #888;'>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu x√°c th·ª±c, h√£y b·ªè qua email n√†y.</p>
    //		<p style='font-size: 13px; color: #888;'>Tr√¢n tr·ªçng,<br />ƒê·ªôi ng≈© Coaching</p>";

    //		await SendEmailAsync(new SendEmailRequest
    //		{
    //			ToEmail = toEmail,
    //			Subject = "üîê M√£ OTP x√°c th·ª±c email",
    //			UserName = coach.FullName,
    //			Content = htmlContent
    //		});

    //		_cache.Set($"otp:{toEmail}", otp, TimeSpan.FromMinutes(5));
    //	}

    //	public async Task<bool> ValidateOTPAsync(string email, string otp)
    //	{
    //		if (_cache.TryGetValue($"otp:{email}", out string storedOtp))
    //		{
    //			if (storedOtp == otp)
    //			{
    //				_cache.Remove($"otp:{email}");

    //				// T√¨m Coach theo email
    //				var coaches = await _coachProfileService.GetAllAsync();
    //				var coach = coaches.FirstOrDefault(x => x.EmailAddress == email);

    //				if (coach != null && coach.Status?.ToLower() == "unverified")
    //				{
    //					var updateDto = new UpdateCoachProfileDTO
    //					{
    //						Id = coach.Id,
    //						Username = coach.Username,
    //						PasswordHashed = coach.PasswordHashed,
    //						Slug = coach.Slug,
    //						FullName = coach.FullName,
    //						LogoUrl = coach.LogoUrl,
    //						AvatarUrl = coach.AvatarUrl,
    //						EmailAddress = coach.EmailAddress,
    //						YoutubeUrl = coach.YoutubeUrl,
    //						InstagramUrl = coach.InstagramUrl,
    //						FacebookUrl = coach.FacebookUrl,
    //						ContactPhone = coach.ContactPhone,
    //						ContactEmail = coach.ContactEmail,
    //						Bio = coach.Bio,
    //						Status = "Verified",
    //						PaymentImg = coach.PaymentImg,
    //						BankImg = coach.BankImg,
    //						Slogan = coach.Slogan
    //					};

    //					await _coachProfileService.UpdateAsync(updateDto);
    //					await SendEmailAsync(new SendEmailRequest
    //					{
    //						ToEmail = coach.EmailAddress,
    //						Subject = "‚úÖ X√°c th·ª±c Email th√†nh c√¥ng",
    //						UserName = coach.FullName,
    //						Content = @"
    //                        <p>Xin ch√†o <strong>" + coach.FullName + @"</strong>,</p>
    //                        <p>Ch√∫c m·ª´ng! B·∫°n ƒë√£ <span style='color:green; font-weight:bold;'>x√°c th·ª±c email th√†nh c√¥ng</span> v√† t√†i kho·∫£n hu·∫•n luy·ªán vi√™n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.</p>
    //                        <p>B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√† b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng n·ªÅn t·∫£ng Coaching ngay b√¢y gi·ªù.</p>
    //                        <hr style='margin: 20px 0;' />
    //                        <p style='font-size: 14px; color: #555;'>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£.</p>
    //                        <p style='font-size: 14px; color: #888;'>Tr√¢n tr·ªçng,<br />ƒê·ªôi ng≈© Coaching</p>
    //                    "
    //					});

    //					return true;
    //				}
    //			}
    //		}

    //		return false;
    //	}

    //	public string CreateOTP()
    //	{
    //		const string digits = "0123456789";
    //		var random = new Random();
    //		return new string(Enumerable.Repeat(digits, 6)
    //			.Select(s => s[random.Next(s.Length)]).ToArray());
    //	}

    //	public async Task NotifyAdminNewCoachAsync(CoachProfileDTO coach)
    //	{
    //		var adminEmail = _config["AdminSettings:Email"];
    //		if (string.IsNullOrWhiteSpace(adminEmail))
    //			throw new Exception("Admin email not configured.");

    //		string adminHtml = $@"
    //    <div style='font-family:Segoe UI,Roboto,sans-serif;max-width:700px;margin:0 auto;background:#fff;padding:24px;border-radius:10px;border:1px solid #ddd'>
    //        <h2 style='color:#2d6cdf;'>üì¢ M·ªôt Coach m·ªõi ƒë√£ ƒëƒÉng k√Ω!</h2>
    //        <p>Th√¥ng tin chi ti·∫øt:</p>
    //<table style=""width:50%; border-collapse:collapse; margin-top:16px; font-size:15px; line-height:1.6; color:#2d6cdf;"">
    //    <tr><td><strong>üë§ H·ªç t√™n:</strong></td><td>{coach.FullName}</td></tr>
    //    <tr><td><strong>üìß Email:</strong></td><td>{coach.EmailAddress}</td></tr>
    //    <tr><td><strong>üì± S·ªë ƒëi·ªán tho·∫°i:</strong></td><td>{coach.ContactPhone ?? "(ch∆∞a cung c·∫•p)"}</td></tr>
    //    <tr><td><strong>üåê Username:</strong></td><td>{coach.Username}</td></tr>
    //</table>


    //        <h4 style='margin-top:24px;color:#2d6cdf;'>üí≥ ·∫¢nh thanh to√°n</h4>
    //        <div style='margin-top:8px'>
    //            {(string.IsNullOrEmpty(coach.PaymentImg) ? "<p>(Ch∆∞a c√≥)</p>" : $"<img src='{coach.PaymentImg}' style='max-width:100%;height:auto;border:1px solid #ccc;border-radius:6px' />")}
    //        </div>

    //        <hr style='margin:24px 0' />
    //        <p style='font-size:13px;color:#888'>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª´ h·ªá th·ªëng Coaching Platform.</p>
    //        <p style='font-size:13px;color:#888'>Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.</p>
    //    </div>";

    //		await SendEmailAsync(new SendEmailRequest
    //		{
    //			ToEmail = adminEmail,
    //			Subject = "üöÄ Hu·∫•n luy·ªán vi√™n m·ªõi v·ª´a ƒëƒÉng k√Ω",
    //			UserName = "Admin",
    //			Content = adminHtml
    //		});

    //		string coachHtml = $@"
    //    <div style='font-family:Segoe UI,Roboto,sans-serif;max-width:700px;margin:0 auto;background:#fff;padding:24px;border-radius:10px;border:1px solid #ddd'>
    //        <h2 style='color:#2d6cdf;'>üéâ Ch√†o m·ª´ng {coach.FullName}!</h2>
    //        <p>B·∫°n ƒë√£ <strong>ƒëƒÉng k√Ω th√†nh c√¥ng</strong> ƒë·ªÉ tr·ªü th√†nh hu·∫•n luy·ªán vi√™n tr√™n n·ªÅn t·∫£ng <strong>Coaching</strong>.</p>

    //        <p>Ch√∫ng t√¥i s·∫Ω xem x√©t th√¥ng tin v√† x√°c th·ª±c trong th·ªùi gian s·ªõm nh·∫•t. Sau khi ƒë∆∞·ª£c duy·ªát, b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu chia s·∫ª ki·∫øn th·ª©c v√† t·∫°o g√≥i hu·∫•n luy·ªán cho kh√°ch h√†ng.</p>

    //        <h4 style='margin-top:24px;color:#2d6cdf;'>üßæ Th√¥ng tin ƒëƒÉng k√Ω</h4>
    //<table style=""width:50%; border-collapse:collapse; margin-top:16px; font-size:15px; line-height:1.6; color:#2d6cdf;"">
    //<tr><td><strong>üë§ Email:</strong></td><td>{coach.EmailAddress}</td></tr>
    //    <tr><td><strong>Ng√†y ƒëƒÉng k√Ω:</strong></td><td>{DateTime.Now:dd/MM/yyyy HH:mm}</td></tr>
    //</table>

    //        {(string.IsNullOrEmpty(coach.PaymentImg) ? "" : $@"
    //        <h4 style='margin-top:24px;color:#2d6cdf;'>üí≥ ·∫¢nh thanh to√°n b·∫°n ƒë√£ g·ª≠i</h4>
    //        <img src='{coach.PaymentImg}' style='max-width:100%;border-radius:6px;border:1px solid #ccc;margin-top:8px' />
    //        ")}

    //        <hr style='margin:24px 0' />
    //        <p style='font-size:14px;color:#888'>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email: <strong>support@coaching.vn</strong></p>
    //        <p style='font-size:13px;color:#aaa'>Tr√¢n tr·ªçng,<br/>ƒê·ªôi ng≈© Coaching</p>
    //    </div>";

    //		await SendEmailAsync(new SendEmailRequest
    //		{
    //			ToEmail = coach.EmailAddress,
    //			Subject = "üéì X√°c nh·∫≠n ƒëƒÉng k√Ω Hu·∫•n luy·ªán vi√™n th√†nh c√¥ng",
    //			UserName = coach.FullName,
    //			Content = coachHtml
    //		});
    //	}

    //	public async Task SendCoachApprovedEmailAsync(CoachProfileDTO coach)
    //	{
    //		string html = $@"
    //<div style='font-family:Segoe UI,Roboto,sans-serif;max-width:700px;margin:0 auto;background:#fff;padding:24px;border-radius:10px;border:1px solid #ddd'>
    //    <h2 style='color:#2d6cdf;'>üéâ Ch√∫c m·ª´ng {coach.FullName}!</h2>
    //    <p>T√†i kho·∫£n hu·∫•n luy·ªán vi√™n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c <strong style='color:green;'>ph√™ duy·ªát</strong>.</p>

    //    <table style='width:50%; border-collapse:collapse; margin-top:16px; font-size:15px; line-height:1.6; color:#2d6cdf;'>
    //        <tr><td><strong>üë§ H·ªç t√™n:</strong></td><td>{coach.FullName}</td></tr>
    //        <tr><td><strong>üåê Username:</strong></td><td>{coach.Username}</td></tr>
    //        <tr><td><strong>üìß Email:</strong></td><td>{coach.EmailAddress}</td></tr>
    //    </table>

    //    <p style='margin-top:24px'>B·∫°n ƒë√£ c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√† s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng tr√™n n·ªÅn t·∫£ng Coaching.</p>

    //    <hr style='margin:24px 0;' />
    //    <p style='font-size:13px;color:#888'>Email ƒë∆∞·ª£c g·ª≠i t·ª´ h·ªá th·ªëng Coaching Platform. Vui l√≤ng kh√¥ng ph·∫£n h·ªìi.</p>
    //</div>";

    //		await SendEmailAsync(new SendEmailRequest
    //		{
    //			ToEmail = coach.EmailAddress,
    //			Subject = "‚úÖ T√†i kho·∫£n hu·∫•n luy·ªán vi√™n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát",
    //			UserName = coach.FullName,
    //			Content = html
    //		});
    //	}

    //	public async Task SendOTPChangePasswordAsync(string email)
    //	{
    //		string otp = CreateOTP();

    //		var coaches = await _coachProfileService.GetAllAsync();
    //		var coach = coaches.FirstOrDefault(x =>
    //			x.EmailAddress.Equals(email, StringComparison.OrdinalIgnoreCase));

    //		if (coach == null)
    //		{
    //			throw new Exception("Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.");
    //		}

    //		string htmlContent = $@"
    //	<p>Xin ch√†o <strong>{coach.FullName}</strong>,</p>
    //	<p>B·∫°n ƒë√£ y√™u c·∫ßu <strong>ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</strong> cho t√†i kho·∫£n Coaching.</p>
    //	<p>M√£ OTP c·ªßa b·∫°n l√†:</p>
    //	<div style='font-size: 28px; font-weight: bold; color: #2d6cdf; padding: 12px 0;'>{otp}</div>
    //	<p>M√£ OTP n√†y s·∫Ω h·∫øt h·∫°n trong <strong>5 ph√∫t</strong>.</p>
    //	<hr style='margin: 20px 0;' />
    //	<p style='font-size: 13px; color: #888;'>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu thay ƒë·ªïi m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y.</p>
    //	<p style='font-size: 13px; color: #888;'>Tr√¢n tr·ªçng,<br />ƒê·ªôi ng≈© Coaching</p>";

    //		await SendEmailAsync(new SendEmailRequest
    //		{
    //			ToEmail = email,
    //			Subject = "üîê M√£ OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u",
    //			UserName = coach.FullName,
    //			Content = htmlContent
    //		});

    //		_cache.Set($"reset-otp:{email}", otp, TimeSpan.FromMinutes(5));
    //	}

    public bool ValidateResetPasswordOTP(string email, string otp)
	{
		if (_cache.TryGetValue($"reset-otp:{email}", out string storedOtp))
		{
			if (storedOtp == otp)
			{
				_cache.Remove($"reset-otp:{email}");
				return true;
			}
		}
		return false;
	}


}
