// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ServiceSolutionDbContext))]
    partial class CoachingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Repository.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Repository.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<int>("CoachingPackageId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentCondition")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentImg")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("TargetGoal")
                        .HasColumnType("longtext");

                    b.Property<string>("TrainingExperience")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CoachingPackageId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Repository.Entities.ClientCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("DaysOfWeek")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientCalendars");
                });

            modelBuilder.Entity("Repository.Entities.ClientProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BodyFat")
                        .HasColumnType("longtext");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Height")
                        .HasColumnType("longtext");

                    b.Property<string>("Muscle")
                        .HasColumnType("longtext");

                    b.Property<string>("Weight")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientProgresses");
                });

            modelBuilder.Entity("Repository.Entities.CoachProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("BankImg")
                        .HasColumnType("longtext");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentImg")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("Slogan")
                        .HasColumnType("longtext");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CoachProfiles");
                });

            modelBuilder.Entity("Repository.Entities.CoachTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoachProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FixedTimeRange")
                        .HasColumnType("longtext");

                    b.Property<string>("RepeatPattern")
                        .HasColumnType("longtext");

                    b.Property<string>("ScheduleType")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CoachProfileId");

                    b.ToTable("CoachTimes");
                });

            modelBuilder.Entity("Repository.Entities.CoachingPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoachingProgramId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("int");

                    b.Property<int?>("DurationWeeks")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CoachingProgramId");

                    b.ToTable("CoachingPackages");
                });

            modelBuilder.Entity("Repository.Entities.CoachingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("CoachingPrograms");
                });

            modelBuilder.Entity("Repository.Entities.CustomerRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<int>("CoachingPackageId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentCondition")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentImg")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TargetGoal")
                        .HasColumnType("longtext");

                    b.Property<string>("TrainingExperience")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CoachingPackageId");

                    b.ToTable("CustomerRegistrations");
                });

            modelBuilder.Entity("Repository.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Repository.Entities.ExerciseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Rep")
                        .HasColumnType("longtext");

                    b.Property<string>("Set")
                        .HasColumnType("longtext");

                    b.Property<string>("Weight")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseHistories");
                });

            modelBuilder.Entity("Repository.Entities.ExercisePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("PlanId");

                    b.ToTable("ExercisePlans");
                });

            modelBuilder.Entity("Repository.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("FeedbackMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Repository.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Repository.Entities.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("longtext");

                    b.Property<int?>("PageContentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Repository.Entities.PageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BackgroundImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PageId")
                        .IsUnique();

                    b.ToTable("PageContents");
                });

            modelBuilder.Entity("Repository.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientCalendarId")
                        .HasColumnType("int");

                    b.Property<string>("ClientConfirm")
                        .HasColumnType("longtext");

                    b.Property<string>("CoachConfirm")
                        .HasColumnType("longtext");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientCalendarId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Repository.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientCalendarId")
                        .HasColumnType("int");

                    b.Property<string>("ClientFeedback")
                        .HasColumnType("longtext");

                    b.Property<string>("CoachFeedback")
                        .HasColumnType("longtext");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientCalendarId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Repository.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("OurProgram")
                        .HasColumnType("longtext");

                    b.Property<string>("OurProgramImage")
                        .HasColumnType("longtext");

                    b.Property<string>("WhoAmI")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CoachId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Repository.Entities.TiktokLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("TiktokUrl")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("TiktokLinks");
                });

            modelBuilder.Entity("Repository.Entities.WhoAmIImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("WhoAmIImages");
                });

            modelBuilder.Entity("Repository.Entities.Client", b =>
                {
                    b.HasOne("Repository.Entities.CoachingPackage", "CoachingPackage")
                        .WithMany("Clients")
                        .HasForeignKey("CoachingPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachingPackage");
                });

            modelBuilder.Entity("Repository.Entities.ClientCalendar", b =>
                {
                    b.HasOne("Repository.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Repository.Entities.ClientProgress", b =>
                {
                    b.HasOne("Repository.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Repository.Entities.CoachTime", b =>
                {
                    b.HasOne("Repository.Entities.CoachProfile", "CoachProfile")
                        .WithMany()
                        .HasForeignKey("CoachProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachProfile");
                });

            modelBuilder.Entity("Repository.Entities.CoachingPackage", b =>
                {
                    b.HasOne("Repository.Entities.CoachingProgram", "CoachingProgram")
                        .WithMany("CoachingPackages")
                        .HasForeignKey("CoachingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachingProgram");
                });

            modelBuilder.Entity("Repository.Entities.CoachingProgram", b =>
                {
                    b.HasOne("Repository.Entities.CoachProfile", "Coach")
                        .WithMany("CoachingPrograms")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Repository.Entities.CustomerRegistration", b =>
                {
                    b.HasOne("Repository.Entities.CoachingPackage", "CoachingPackage")
                        .WithMany("CustomerRegistrations")
                        .HasForeignKey("CoachingPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachingPackage");
                });

            modelBuilder.Entity("Repository.Entities.Exercise", b =>
                {
                    b.HasOne("Repository.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Repository.Entities.ExerciseHistory", b =>
                {
                    b.HasOne("Repository.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("Repository.Entities.ExercisePlan", b =>
                {
                    b.HasOne("Repository.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Repository.Entities.Feedback", b =>
                {
                    b.HasOne("Repository.Entities.CoachProfile", "Coach")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Repository.Entities.Note", b =>
                {
                    b.HasOne("Repository.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Repository.Entities.Page", b =>
                {
                    b.HasOne("Repository.Entities.CoachProfile", "Coach")
                        .WithMany("Pages")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Repository.Entities.PageContent", b =>
                {
                    b.HasOne("Repository.Entities.Page", "Page")
                        .WithOne("PageContent")
                        .HasForeignKey("Repository.Entities.PageContent", "PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Repository.Entities.Plan", b =>
                {
                    b.HasOne("Repository.Entities.ClientCalendar", "ClientCalendar")
                        .WithMany()
                        .HasForeignKey("ClientCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCalendar");
                });

            modelBuilder.Entity("Repository.Entities.Report", b =>
                {
                    b.HasOne("Repository.Entities.ClientCalendar", "ClientCalendar")
                        .WithMany()
                        .HasForeignKey("ClientCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCalendar");
                });

            modelBuilder.Entity("Repository.Entities.Setting", b =>
                {
                    b.HasOne("Repository.Entities.CoachProfile", "Coach")
                        .WithOne("Setting")
                        .HasForeignKey("Repository.Entities.Setting", "CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Repository.Entities.TiktokLink", b =>
                {
                    b.HasOne("Repository.Entities.CoachProfile", "Coach")
                        .WithMany("TiktokLinks")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Repository.Entities.WhoAmIImage", b =>
                {
                    b.HasOne("Repository.Entities.CoachProfile", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Repository.Entities.CoachProfile", b =>
                {
                    b.Navigation("CoachingPrograms");

                    b.Navigation("Feedbacks");

                    b.Navigation("Pages");

                    b.Navigation("Setting");

                    b.Navigation("TiktokLinks");
                });

            modelBuilder.Entity("Repository.Entities.CoachingPackage", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("CustomerRegistrations");
                });

            modelBuilder.Entity("Repository.Entities.CoachingProgram", b =>
                {
                    b.Navigation("CoachingPackages");
                });

            modelBuilder.Entity("Repository.Entities.Page", b =>
                {
                    b.Navigation("PageContent");
                });
#pragma warning restore 612, 618
        }
    }
}
